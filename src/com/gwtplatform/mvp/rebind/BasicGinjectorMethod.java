/**
 * Copyright 2010 ArcBees Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.gwtplatform.mvp.rebind;

import com.google.gwt.core.ext.UnableToCompleteException;
import com.google.gwt.core.ext.typeinfo.JMethod;
import com.google.gwt.core.ext.typeinfo.JPrimitiveType;
import com.google.gwt.uibinder.rebind.IndentedWriter;
import com.google.gwt.uibinder.rebind.MortalLogger;

/**
 * This class identifies a method that will be copied to the basic {@link Ginjector} wrapped in the 
 * class generated by {@link ParameterizedGinjectorGenerator}. 
 * 
 * @author Philippe Beaudoin
 */
public class BasicGinjectorMethod {

  private final JMethod method;
    
  /**
   * Instrument the given method so that it can be used to forward calls to the wrapped basic ginjector.
   * The method must have 0 parameter, or 1 parameter and return void.
   * 
   * @param method The {@link JMethod} to wrap.
   */
  public BasicGinjectorMethod(JMethod method) {    
    this.method = method;
  }
  
  /**
   * Writes the declaration of this method in the wrapped ginjector interface.
   * 
   * @param writer The {@link IndentedWriter}
   * @param logger The {@link MortalLogger on which to report errors}
   */
  public void writeDeclaration(IndentedWriter writer, MortalLogger logger) throws UnableToCompleteException {   
    validateMethod(logger);
    writer.write(buildMethodDeclarationPrefix() + ";");    
  }
  
  /**
   * Writes the implementation of this method, forwarding the call to the wrapped ginjector.
   * @param writer The {@link IndentedWriter}
   */
  public void writeImplementation(String wrappedGinjectorFieldName, IndentedWriter writer, MortalLogger logger) throws UnableToCompleteException {   
    validateMethod(logger);
    writer.write(buildMethodDeclarationPrefix() + " {");
    writer.indent();
    if (method.getParameters().length == 0) {
      writer.write("return %s.%s();", wrappedGinjectorFieldName, method.getName());      
    } else {
      writer.write("%s.%s(param);", wrappedGinjectorFieldName, method.getName());      
    }
    writer.outdent();
    writer.write("}");
    writer.newline();
  }

  /**
   * Ensures the method has 0 parameters or has 1 parameter and returns void.
   * 
   * @param logger The {@link MortalLogger on which to report errors}
   * @throws UnableToCompleteException Thrown if invalid.
   */
  private void validateMethod(MortalLogger logger)
  throws UnableToCompleteException {
    if (method.getParameters().length > 1) {
      logger.die("Ginjector method " + method.getName() + " has too many parameters.");
    }
    
    if (method.getParameters().length == 1 && method.getReturnType() != JPrimitiveType.VOID) {
      logger.die("Ginjector method " + method.getName() + " has one parameter but does not return void.");
    }
  }  

  /**
   * Builds the declaration for a method from the {@link JMethod} that 
   * can be used in the wrapped ginjector. The provided {@link JMethod} must have 0 or 1 
   * parameter, this is not enforced here. The final semicolon or opening brace is not added.
   * 
   * @param method The {@link JMethod} for which to write a declaration prefix.
   * @return The string corresponding to the declaration prefix.
   */
  private String buildMethodDeclarationPrefix() {
    if (method.getParameters().length == 0) {
      return buildNoParameterMethodDeclarationPrefix();      
    }
    return buildOneParameterMethodDeclarationPrefix();
  }
  
  /**
   * Builds the declaration for a 0 parameter method from the {@link JMethod} that 
   * can be used in the wrapped ginjector. The provided {@link JMethod} must have 0 
   * parameter, this is not enforced here. The final semicolon or opening brace is not added.
   * 
   * @param method The {@link JMethod} for which to write a declaration prefix.
   * @return The string corresponding to the declaration prefix.
   */
  private String buildNoParameterMethodDeclarationPrefix() {
    return "public " + method.getReturnType().getParameterizedQualifiedSourceName() + " " + method.getName() + "()";
  }

  /**
   * Builds the declaration for a 1 parameter method return void from the {@link JMethod} that 
   * can be used in the wrapped ginjector. The provided {@link JMethod} must have 1 
   * parameter, this is not enforced here. The parameter is named {@code param}.
   * The final semicolon or opening brace is not added.
   * 
   * @param method The {@link JMethod} for which to write a declaration pefix.
   * @return The string corresponding to the declaration prefix.
   */
  private String buildOneParameterMethodDeclarationPrefix() {
    return "public void " + method.getName() + "(" + method.getParameters()[0].getType().getParameterizedQualifiedSourceName() + " param)";
  }

}
